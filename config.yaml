# Sample Configuration File (config.yaml) with Detailed Descriptions

# The port on which the server will listen for incoming HTTP requests.
# Example: "8080" means the server will be accessible on http://localhost:8080
port: "8098"

# The default directory where image files are stored.
# When no "source" parameter is provided in the URL, images will be loaded from this directory.
# Example: "./images"
image_dir: "./images"

# A list of allowed file extensions for image files.
# If disable_file_type_check is set to true, this list will be ignored.
# Example: [".jpg", ".png", ".gif"]
allowed_extensions: [".jpg", ".png", ".gif", ".webp"]

# If set to true, the server will skip the file extension check.
# This means any file, regardless of its extension, can be served as an image.
# Example: true (disables file type check) or false (only serves allowed file types)
disable_file_type_check: false

# The path to the favicon file to be served when the "/favicon.ico" endpoint is accessed.
# Example: "./assets/favicon.ico"
favicon_path: "./assets/favicon.ico"

# Enable Cross-Origin Resource Sharing (CORS) support.
# When set to true, the server will add appropriate CORS headers to the response.
# Example: true (enable CORS) or false (disable CORS)
cors_enabled: true

# A list of allowed origins for CORS requests.
# Use "*" to allow all origins or specify specific domains (e.g., ["https://example.com"]).
# This is only relevant if cors_enabled is set to true.
# Example: ["https://example.com", "https://another-site.com"]
allowed_origins: ["*"]

# A list of allowed HTTP methods for CORS requests.
# If set, only these methods will be allowed for cross-origin requests.
# Example: ["GET", "POST", "OPTIONS"]
allowed_methods: ["GET", "POST", "OPTIONS"]

# A list of allowed headers for CORS requests.
# This is useful if you want to allow custom headers in cross-origin requests.
# Example: ["Content-Type", "Authorization"]
allowed_headers: ["Content-Type", "Authorization", "*"]

# The mode of operation for serving images.
# "direct": Directly serves the image file as a response.
# "redir": Redirects the client to the URL of the image file.
# Example: "direct" or "redir"
mode: "redir"

# Enable referer check to restrict access based on the HTTP Referer header.
# If set to true, requests with a Referer not in the allowed_referers list will be rejected with a 403 status code.
# Example: true (enable referer check) or false (disable referer check)
referer_check_enabled: false

# A list of allowed Referer URLs.
# Only requests with a Referer matching one of these values will be allowed.
# Example: ["https://example.com", "https://another-site.com"]
allowed_referers: ["https://example.com", "https://another-site.com"]

# A mapping of URL query parameters to specific image directories.
# If the "source" parameter in the URL matches one of these keys, the server will load images from the corresponding directory.
# This allows serving images from multiple directories based on the user's input.
# Example: If the URL is /?source=dogs, the server will load images from "./images/dogs"
# If the URL is /?source=cats, the server will load images from "./images/cats"
# If no matching source is found, it defaults to the 'image_dir' directory.
param_source_mapping:
  dogs: "./images/dogs"
  cats: "./images/cats"
  nature: "./images/nature"